**************
Advanced Usage
**************

The following topics may be relevant when working on real-world documentation 
projects, which often demand a greater level of customization than is necessary 
to get started with.

A TOC for every class
=====================
It is also possible to use :rst:dir:`autoclasstoc` in auto-generated API 
documentation, i.e. where all of the classes in your project are documented 
without you having to explicitly write an :rst:dir:`autoclass` directive for 
each one.  The way to do this is to use the :ext:`autosummary` extension with a 
custom Jinja template for classes, as detailed below:

1. Configure the :ext:`autosummary` extension to automatically generate stub 
   files each time the documentation is built:

   .. code-block:: python

      # conf.py
      autosummary_generate = True

   Alternatively, you could generate stub files yourself by running the 
   ``autogen`` command when necessary (after completing steps 2 and 3 below).  
   I find this less convenient, but it might be better if you intend to edit 
   the stub files by hand:

   .. code-block:: console

      $ sphinx-autogen -t _templates path/to/doc/with/autosummary.rst

2. Add an :rst:dir:`autosummary` directive to your documentation.  Anywhere 
   will work, but ``index.rst`` is a common choice:

   .. code-block:: rst

      .. autosummary::
         :toctree: path/to/directory/for/autogenerated/files
         :recursive:

         module.to.document

3. Provide a custom Jinja_ template for formatting class stub files.  The 
   purpose of this template is to specify that :rst:dir:`autoclasstoc` should 
   be used for each class:

   .. code-block:: rst

      {# _templates/autosummary/class.rst #}
      {{ fullname | escape | underline}}
      
      .. currentmodule:: {{ module }}
      
      .. autoclass:: {{ objname }}
         :members:
         :undoc-members:
         :special-members:
         :private-members:
         :inherited-members:
         :show-inheritance:
      
         .. autoclasstoc::

   Note that the name of the ``_template`` directory depends on the value of 
   the ``templates_path`` setting in ``conf.py``.

.. _Jinja: https://jinja.palletsprojects.com/

Custom sections
===============
By default, :rst:dir:`autoclasstoc` divides the TOC into two sections: "Public 
Methods" and "Private Methods".  However, for some projects it may make more 
sense to categorize attributes differently.  One such example might be a GUI 
library that uses methods beginning with ``on_`` to handle events, e.g.  
``on_mouse_down()``, ``on_key_up()``,  etc.  In this case we might want to 
divide attributes into three sections: "Event Handlers", "Public Methods", and 
"Private Methods".  This is not hard to configure, as we'll show below:

Sections in the :rst:dir:`autoclasstoc` are represented by the `Section` class, 
so we'll have to make a new `Section` subclass for our event handlers::

    # conf.py
    from autoclasstoc import Section, is_method, is_public

    class EventHandlers(Section):
        key = 'event-handlers'
        title = "Event Handlers:"

        def predicate(self, name, attr):
            return is_method(name, attr) and name.startswith('on_')

We'll also have to remake the `Section` subclass for public methods, to avoid 
listing the event handlers twice::

    class PublicMethods(Section):
        key = 'public-methods'
        title = "Public Methods:"

        def predicate(self, name, attr):
            return is_method(name, attr) and is_public(name) and not name.startswith('on_')

Finally, we need to specify that our new sections should be used by default 
(and what order they should go in)::

    autoclasstoc_sections = [
            'event-handlers',
            'public-methods',
            'private-methods',
    ]
  
Hopefully this code is fairly self explanatory, but the documentation for the 
`Section` class and the `autoclasstoc_sections` option also explain everything 
in greater detail.

Custom CSS
==========
All of the HTML elements generated by :rst:dir:`autoclasstoc` are contained in 
a ``<div>`` with class ``autoclasstoc``.  This can be used to select and style 
the elements in the class TOC.  Note that the plugin includes some default 
rules to control the spacing around the ``<details>`` elements that contain 
TOCs for inherited attributes.

